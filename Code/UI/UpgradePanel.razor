@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Sandbox

<root class="@(!IsOpen ? "hide" : "show")">
	<div class="upgrades">
		@foreach (var upgrade in Upgrades.UpgradeList)
		{
			var info = upgrade.UpgradeInfo;
			<div class="upgrade">
				<span>@info.Name</span>

				@if (info.isBroken)
				{
					<div class="button" onclick="() => RepairItem(upgrade)">
						Repair
					</div>
				}
				else if (!info.isActive)
				{
					<div class="button" onclick="() => BuyItem(upgrade)">
						Buy
					</div>
				}
				<div class="tooltip">@(info.Description)</div>
			</div>
		}
	</div>
</root>

@code
{
	[Property] public CarUpgradeManager Upgrades;
	[Property] public Economy PlayerEconomy;
	public bool IsOpen { get; set; } = false;

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( IsOpen );

	protected override void OnStart()
	{
		foreach (var upgrade in Upgrades.UpgradeList)
		{
			upgrade.UpgradeInfo.visual.Enabled = false;
		}
	}
	protected override void OnUpdate()
	{
		if (Input.Pressed("Use"))
		{
			Log.Info("I have been pressed");
			IsOpen = !IsOpen;
		}
	}

	public void RepairItem(CarUpgradeComponent upgrade)
	{
		Log.Info("RepairItem method called!");
		if ( PlayerEconomy.TryBuy( upgrade.UpgradeInfo.repairCost ) )
		{
			upgrade.UpgradeInfo.isBroken = false;
			upgrade.OnRepair.Invoke();
		}
	}

	public void BuyItem(CarUpgradeComponent upgrade)
	{
		Log.Info("BuyItem method called!");
		if (PlayerEconomy.TryBuy(upgrade.UpgradeInfo.buyCost))
		{
			Log.Info("Bought");
			upgrade.UpgradeInfo.visual.Enabled = true;
			upgrade.UpgradeInfo.isBroken = false;
			upgrade.UpgradeInfo.isActive = true;
			upgrade.OnBuy.Invoke();
		}

	}
}
